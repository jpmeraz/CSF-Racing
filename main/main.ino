
/*Códigos de error:
200 --> Ok
401 --> Error al iniciar termómetro
402 --> Error al leer la temperatura
501 --> Error al iniciar la pantalla LCD
*/

/*Librerías*/
//Pantalla
#include <U8glib.h>

//Termómetro
#include <Wire.h>
#include <Adafruit_MLX90614.h>


/*Pins*/
U8GLIB_ST7920_128X64 u8g(13, 11, 10, U8G_PIN_NONE);
Adafruit_MLX90614 termometroIR = Adafruit_MLX90614();


/*Array para almacenar los códigos de estatus:
[0] --> Termómetro*/
int estatus [1]; //Espacio para 5 códigos de estatus.
int intento = 0; //Contador interno de void setup()


// Bitmaps
// Logotipo de la escudería
const unsigned char BORREGOS_SF_TEAM_RACING[] = {
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xE1, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xC1, 0x00, 0x00, 0x7C, 0x0F, 0x80, 0xE0, 0x78, 0x1F, 0x01, 0x80, 0xE0, 0x38, 0x1F, 0xFF, 0xFF,
    0xC1, 0x00, 0x00, 0x38, 0x07, 0x80, 0x40, 0x78, 0x0F, 0x01, 0x80, 0xE0, 0x30, 0x1F, 0xFF, 0xFF,
    0x83, 0x00, 0x00, 0x38, 0x07, 0x80, 0x40, 0x38, 0x0F, 0x01, 0x80, 0xC0, 0x10, 0x1F, 0xFF, 0xFF,
    0x83, 0x80, 0x00, 0x38, 0x03, 0x80, 0x40, 0x38, 0x07, 0x01, 0x00, 0xC0, 0x10, 0x1F, 0xFF, 0xFF,
    0x85, 0x80, 0x00, 0x18, 0xE3, 0x9E, 0x47, 0x19, 0xC7, 0x3F, 0x1F, 0xC7, 0x13, 0xFF, 0xFF, 0xFF,
    0x85, 0x40, 0x00, 0x18, 0xF3, 0x9C, 0x47, 0x19, 0xE3, 0x3F, 0x1F, 0xC7, 0x13, 0xFF, 0xFF, 0xFF,
    0x89, 0x40, 0x00, 0x18, 0xE3, 0x9C, 0x47, 0x99, 0xE3, 0x3F, 0x1F, 0xC7, 0x13, 0xFF, 0xFF, 0xFF,
    0x99, 0x20, 0xE0, 0x18, 0x07, 0x9C, 0x47, 0x99, 0xE3, 0x03, 0x18, 0x47, 0x10, 0x3F, 0xFF, 0xFF,
    0xF1, 0x19, 0xF8, 0x78, 0x07, 0x9C, 0x47, 0x19, 0xE3, 0x03, 0x18, 0x47, 0x10, 0x1F, 0xFF, 0xFF,
    0xC1, 0x03, 0xFD, 0xF8, 0x03, 0x9C, 0x47, 0x19, 0xC7, 0x03, 0x18, 0x47, 0x10, 0x0F, 0xFF, 0xFF,
    0x83, 0x04, 0x3D, 0x18, 0x03, 0x9C, 0x40, 0x38, 0x07, 0x3F, 0x18, 0x47, 0x18, 0x0F, 0xFF, 0xFF,
    0x83, 0x80, 0x1E, 0x18, 0xF1, 0x9C, 0x40, 0x38, 0x0F, 0x3F, 0x1E, 0x47, 0x1F, 0x8F, 0xFF, 0xFF,
    0x83, 0x80, 0x0F, 0x18, 0xF1, 0x9C, 0x40, 0x78, 0x0F, 0x3F, 0x1C, 0x47, 0x1F, 0x8F, 0xFF, 0xFF,
    0x85, 0x80, 0x07, 0x18, 0xF1, 0x9E, 0x40, 0x38, 0x0F, 0x3F, 0x1C, 0x47, 0x1F, 0x8F, 0xFF, 0xFF,
    0x85, 0x43, 0x83, 0x98, 0xF3, 0x9C, 0x46, 0x39, 0xC7, 0x01, 0x10, 0x47, 0x1F, 0x8F, 0xFF, 0xFF,
    0x89, 0x67, 0xC3, 0x98, 0x03, 0x80, 0x47, 0x39, 0xC7, 0x01, 0x00, 0x40, 0x10, 0x0F, 0xFF, 0xFF,
    0xB1, 0x2F, 0xE1, 0xF8, 0x07, 0x80, 0x47, 0x19, 0xE7, 0x01, 0x80, 0x40, 0x30, 0x0F, 0xFF, 0xFF,
    0xE1, 0x1F, 0xF1, 0xF8, 0x07, 0x80, 0xC7, 0x19, 0xE3, 0x01, 0x80, 0x60, 0x30, 0x1F, 0xFF, 0xFF,
    0x83, 0x1F, 0xF0, 0xFD, 0xFF, 0xFF, 0xEF, 0x99, 0xF3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x83, 0x1F, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x83, 0xBC, 0x79, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x85, 0xB8, 0x3D, 0xFC, 0x0E, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x85, 0x70, 0x3F, 0xFC, 0x0E, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x89, 0x70, 0x1F, 0xFC, 0x0E, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x99, 0x30, 0x1F, 0xF8, 0x0E, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xF1, 0x32, 0x0F, 0xF8, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x81, 0x31, 0x0F, 0xF8, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x83, 0x11, 0x1F, 0xF8, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x83, 0x91, 0x9F, 0xF8, 0x0E, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x83, 0x91, 0x9F, 0xFC, 0x06, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x85, 0x90, 0xDF, 0xFC, 0x06, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x8D, 0x58, 0xCF, 0xFE, 0x06, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x89, 0x28, 0xC7, 0xFF, 0xE6, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xB1, 0x28, 0xCB, 0xFF, 0xE6, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xE1, 0x08, 0xE9, 0xFF, 0xE6, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x83, 0x04, 0xE9, 0xFF, 0x86, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x83, 0x04, 0xEF, 0xF8, 0x06, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x83, 0x84, 0xEF, 0xF8, 0x06, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x85, 0x83, 0xEF, 0xF8, 0x0E, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x85, 0x53, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x89, 0x5F, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x99, 0x2F, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xF1, 0x0F, 0xC7, 0xF8, 0x0F, 0xF3, 0xF0, 0x11, 0x3C, 0xC0, 0x7E, 0x00, 0x80, 0x78, 0xF9, 0xF9,
    0x81, 0x07, 0x87, 0xF8, 0x07, 0xE1, 0xE0, 0x11, 0x3C, 0xC0, 0x7E, 0x00, 0x80, 0x78, 0xF9, 0xF9,
    0x83, 0x02, 0x4B, 0xF8, 0x07, 0xE1, 0xE0, 0x11, 0x1C, 0xC0, 0x7E, 0x00, 0x80, 0x78, 0x78, 0xF1,
    0x82, 0x80, 0x4B, 0xF8, 0x07, 0xE1, 0xE3, 0xF1, 0x1C, 0xC7, 0xFF, 0xC7, 0x8F, 0xF8, 0x78, 0xF1,
    0x82, 0x80, 0x23, 0xF8, 0xE3, 0xE1, 0xE3, 0xF1, 0x0C, 0xCF, 0xFF, 0xC7, 0x8F, 0xF8, 0x78, 0x71,
    0x84, 0x80, 0x3D, 0xF8, 0xE3, 0xE1, 0xE3, 0xF1, 0x0C, 0xCF, 0xFF, 0xC7, 0x8F, 0xF0, 0x78, 0x61,
    0x8C, 0x40, 0x19, 0xF8, 0xF1, 0xC0, 0xE3, 0xF1, 0x04, 0xCF, 0xFF, 0xC7, 0x8F, 0xF0, 0x78, 0x61,
    0x88, 0x20, 0x19, 0xF8, 0xF3, 0xC0, 0xE3, 0xF1, 0x04, 0xCC, 0x3F, 0xC7, 0x80, 0xF2, 0x38, 0x01,
    0xB0, 0x38, 0x19, 0xF8, 0xE3, 0xC8, 0xE3, 0xF1, 0x04, 0xCC, 0x3F, 0xC7, 0x80, 0xF2, 0x38, 0x01,
    0xE0, 0x0F, 0x89, 0xF8, 0xE3, 0xCC, 0xE3, 0xF1, 0x20, 0xCC, 0x3F, 0xC7, 0x80, 0xF2, 0x39, 0x09,
    0x80, 0x00, 0xC9, 0x98, 0x07, 0xCC, 0xE3, 0xF1, 0x20, 0xCE, 0x3F, 0xC7, 0x8F, 0xE3, 0x39, 0x09,
    0x80, 0x00, 0x4A, 0x18, 0x07, 0x8C, 0x63, 0xF1, 0x30, 0xCF, 0x3F, 0xC7, 0x8F, 0xE3, 0x39, 0x99,
    0x80, 0x00, 0x2E, 0x18, 0x07, 0x80, 0x63, 0xF1, 0x30, 0xCF, 0x3F, 0xC7, 0x8F, 0xE0, 0x19, 0x99,
    0x80, 0x00, 0x24, 0x18, 0xC7, 0x80, 0x63, 0xF1, 0x38, 0xCF, 0x3F, 0xC7, 0x8F, 0xE0, 0x19, 0xF9,
    0x80, 0x00, 0x1C, 0x38, 0xE7, 0x80, 0x60, 0x11, 0x38, 0xC0, 0x3F, 0xC7, 0x80, 0x60, 0x19, 0xF9,
    0x80, 0x00, 0x18, 0x38, 0xE3, 0x80, 0x60, 0x11, 0x3C, 0xC0, 0x3F, 0xC7, 0x80, 0x40, 0x19, 0xF9,
    0xC0, 0x00, 0x18, 0x38, 0xE3, 0x1E, 0x70, 0x11, 0x3C, 0xC0, 0x3F, 0xC7, 0x80, 0x47, 0x99, 0xF9,
    0xC0, 0x00, 0x08, 0x78, 0xF3, 0x1E, 0x30, 0x11, 0x3E, 0xE0, 0x3F, 0xC7, 0x80, 0x47, 0x89, 0xF9,
    0xE0, 0x00, 0x08, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};


void setup()
{
  Serial.begin(9600);

  /*BOOTUP TERMOMETRO IR*/
  //Sí el código de estatus del termómetro es 200, se ejecuta el código correspondiente.
  while (intento < 3) {
    if (termometroIR.begin() == 1){
      estatus[0] = 200;
      error_handling("Termometro", 200); //Imprime código de estatus
    }
    else{
      estatus[0] = 401;
      error_handling("Termometro", 401); //Imprime código de estatus
    }
    intento++;
    delay(5000);
  }

  intento = 0; // Se reinicia el contador de intentos.

  /*BOOTUP LCD*/
  /* Se intenta iniciar el LCD 3 veces, si no se obtiene respuesta de u8g.begin(), se matiene el código de estatus 401
  y se continúa con el programa.*/
  while (intento < 3){
    if (u8g.begin() != 0){
      u8g.setRot180();
      u8g.setColorIndex(1); // pixels on
      estatus[1] = 200;
      error_handling("LCD", 200); //Imprime código de estatus
      bootUp_screen();
    }
    else{
      estatus[1] = 501;
      error_handling("LCD", 501); //Imprime código de estatus
    }
    intento++;
    delay(5000);
    clear_screen();
  }
delay(1000);

}


void loop()
{
  float temperaturaAmbiente = termometroIR.readAmbientTempC();
  float temperaturaObjeto = termometroIR.readObjectTempC();
  /*LECTURA DE TEMPERATURA*/
  if (estatus[0] == 200){
    if (!(isnan(temperaturaAmbiente))){
      Serial.print("Temp. ambiente => ");
      Serial.print(temperaturaAmbiente);
      Serial.println("ºC");

      Serial.print("Temp. objeto => ");
      Serial.print(temperaturaObjeto);
      Serial.println("ºC");
    }
    else{
      estatus[0] = 402; // El modificar el estatus, loop no volverá a ejecutar el código del termometro.
      error_handling("Termometro", 402); //Imprime código de estatus
    }
  }

  /*IMPRIMIR EN LCD*/
  if (estatus[1] == 200){
    u8g.firstPage();  
    do {
      mostrar_display(temperaturaObjeto);
    } while(u8g.nextPage());
  }
}

/*FUNCIONES*/

void bootUp_screen()
{
  // graphic commands to redraw the complete screen should be placed here
  // u8g.setFont(u8g_font_unifont);
  // u8g.setFont(u8g_font_helvB24);
  u8g.setFont(u8g_font_profont17);
  u8g.firstPage();
  do
  {
    u8g.drawBitmap(0, 0, 16, 64, BORREGOS_SF_TEAM_RACING); // (x, y, width*8, height)
  } while (u8g.nextPage());

  delay(6000);
}

void clear_screen()
{
  u8g.firstPage();
  do
  {
    u8g.setColorIndex(0); // Clear pixel value
    u8g.drawBox(0, 0, 64, 128); // Draw clear pixel in all LCD
  } while (u8g.nextPage());
}

void mostrar_display(int temperaturaObjeto)
{
    u8g.setFont(u8g_font_7x14B);
    u8g.setColorIndex(1);
    u8g.drawStr(10, 14, "#10 - SERGIO Z.");

    u8g.setFont(u8g_font_courB12);
    
    u8g.setPrintPos(10, 43);
    u8g.print(20, 1); //32 px

    u8g.setPrintPos(50, 43);
    u8g.print(temperaturaObjeto, 1); //32 px


    u8g.setFont(u8g_font_7x14B);
    u8g.drawStr(10, 60, "KM/H"); //32 Px de ancho
    u8g.drawStr(66, 60, "°C"); //16 Px de ancho
}


// Función para imprimir los códigos de estatus.
void error_handling(String componente, int debug){
  Serial.print(componente + ": ");
  Serial.println(debug);
}
